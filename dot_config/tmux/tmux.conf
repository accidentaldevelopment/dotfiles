set -g default-terminal "${TERM}"
# Undercurl support (may not be needed?)
set -as terminal-overrides '*:Smulx=\E[4::%p1%dm'
# Underscore colours
set -as terminal-overrides '*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Enable mouse control (clickable window, panes, moveable things, etc)
# This requires holding `shift` to highlight.
set -g mouse on

# vi mode
set-window-option -g mode-keys vi
# vim key bindings for clipboard
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'V' send -X select-line

setw -g automatic-rename on
set -g set-titles on
# Renumber windows one closed
set-option -g renumber-windows on

setw -g monitor-activity on
set  -g visual-activity on
set  -sg escape-time 0

set -g status-interval 60

# Status line icons
set -g @status-session-icon ""
set -g @status-user-icon ""
set -g @status-window-icon ""
set -g @status-window-active-icon ""
set -g @status-calendar-icon ""
set -g @status-clock-icon ""
set -g @status-prefix-active-icon ""
set -g @status-prefix-icon ""
set -g @window-status-active-style ""
# ❱

setw -g mode-style "fg=black,bg=yellow"       # Window mode style
set -g message-style "fg=green"               # Status line message style
set -g message-command-style "fg=green"       # Status line message command style
set -g status on                              # Show or hide status line
set -g status-interval 1                      # Update status line every interval second
set -g status-justify left                    # Set the position of the window list component of status line
set -g status-position bottom                 # Set the position of status line
setw -g clock-mode-colour yellow              # Set clock color
setw -g clock-mode-style 24                   # Set clock hour format
setw -g window-status-activity-style "fg=red" # Window with activity alert style
setw -g window-status-separator ""            # Set the separator drawn between windows in status line
set -g status-left-length 100                 # Set the maximum length of left status line
set -g status-right-length 100                # Set the maximum length of right status line
set -g status-style "fg=white,bg=#555555"                # Status line style
setw -g pane-border-status off                # Pane border status line
setw -g pane-border-style "fg=blue"           # Pane border style
setw -g pane-active-border-style "fg=red"     # Active pane border style

# Left status line configurations
set -g status-left " #[fg=blue,bold]#{@status-session-icon} #S #[fg=yellow]#{@status-user-icon} #(whoami) #{?client_prefix,#[fg=green]#{@status-prefix-active-icon},#[fg=red]#{@status-prefix-icon}} "

# Right status line configurations
set -g status-right "#[fg=green,bold]#{@status-calendar-icon} %Y-%m-%d #[fg=magenta]#{@status-clock-icon} %H:%M%z "

# Window status line configurations
set -g window-status-current-style 'fg=#CCCCCC,bg=#555555'
set -g window-status-style 'fg=#777777,bg=#555555'
setw -g window-status-current-format "#[reverse]#I:#W#[noreverse]"
setw -g window-status-format "#[reverse]#I:#W#[noreverse]"

unbind %
unbind \"
bind | split-window -h
bind - split-window -v

# reload config file
bind r source-file ~/.config/tmux/tmux.conf

set -g popup-style 'bg=#222222'
set -g popup-border-style 'fg=green,bg=#222222'
set -g popup-border-lines rounded
# Open a floating terminal
# %if "#{==:#{client_termname},xterm-kitty}"
# bind -n C-_ popup -w 90% -h 90% -d '#{pane_current_path}' -E 'zsh -l'
# %else
# bind -n C-t popup -w 90% -h 90% -d '#{pane_current_path}' -E 'zsh -l'
# %endif
# Do we need tmux for the floating popup?
bind -n C-/ if-shell "[[ $(tmux display-message -p '#S') = scratch-* ]]" {
  detach-client
} {
  # run-shell "tmux popup -w 95% -h 95% -x 8 -d '#{pane_current_path}' -E 'tmux attach -t \'float-#{pane_id}\' || tmux new -s \'float-#{pane_id}\' \;'"
  # TODO: Can we kill these leftover scratch sessions when the parent pane exits?
  display-popup -w 95% -h 95%  -E "tmux new-session -A -s scratch-#{pane_id}"
}

bind m setw synchronize-panes

bind M set mouse

bind C-S-l clear-history

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -n M-h if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 3'
bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\\'  'select-pane -l'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind C-j popup -w 70% -E "\
  tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
  sed '/^$/d' |\
  fzf --preview-window=75%,wrap --reverse --prompt 'select session> ' --preview 'tmux capture-pane -pt {}' |\
  xargs tmux switch-client -t"

bind C-o popup -w 70% -E "$HOME/.config/tmux/create_new_session.sh"
# bind C-o popup -w 70% -E "\
#   fd --type d --max-depth=2 '' $HOME | fzf --preview-window=75%,wrap --reverse --header 'new session' |\
#   xargs tmux new-session -s"

# This is some fancy crap to correct key bindings if I'm running tmux locally, and ssh'd to another server also running tmux
# Basically, F12 disables all keys. This allows the tmux-over-ssh session to receive keystrokes instead of the local one.
#
# Semi-shamefully adapted from a website/user I can't find anymore, otherwise credit would be here.
bind -T root F12  {
  set prefix None
  set key-table off
  if -F '#{pane_in_mode}' 'send-keys -X cancel'
  set status-right 'OFF'
  refresh-client -S
  #set status-style "fg=$color_status_text,bg=$color_window_off_status_bg"
  #set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]"
  #set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg"
}

bind -T off F12 {
  set -u prefix
  set -u key-table
  set -u status-right
  refresh-client -S
  #set -u status-style
  #set -u window-status-current-style
  #set -u window-status-current-format
}
